{
	"name": "csv_cache_bulk",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "test_blob_storage_nsw",
						"type": "LinkedServiceReference"
					},
					"name": "csvFileRead"
				}
			],
			"sinks": [
				{
					"name": "csvDataInCache"
				}
			],
			"transformations": [
				{
					"name": "derivedFileNameColumn"
				},
				{
					"name": "assert1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          age as short,",
				"          update_at as date 'yyyy/MM/dd'",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'filePath',",
				"     format: 'delimited',",
				"     container: 'test-nsw',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['test_nsw_1/test*.csv']) ~> csvFileRead",
				"csvFileRead derive(fileName = split(filePath, '/')[size(split(filePath, '/'))],",
				"          update_at = toString(update_at, 'yyyy-MM-dd')) ~> derivedFileNameColumn",
				"derivedFileNameColumn assert(expectTrue(!isNull(update_at), false, 'assert1', null, \"update_at 列に NULL が存在する場合\"),",
				"     abort: true) ~> assert1",
				"assert1 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          name,",
				"          age,",
				"          update_at,",
				"          fileName",
				"     )) ~> csvDataInCache"
			]
		}
	}
}