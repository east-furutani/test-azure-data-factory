{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "データ ファクトリ名",
			"defaultValue": "test-nsw"
		},
		"test_blob_storage_nsw_connectionString": {
			"type": "secureString",
			"metadata": "'test_blob_storage_nsw' の 'connectionString' のセキュリティで保護された文字列"
		},
		"test_db_nsw_link_service_password": {
			"type": "secureString",
			"metadata": "'test_db_nsw_link_service' の 'password' のセキュリティで保護された文字列"
		},
		"test_db_nsw_link_service_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "test-server-nsw.database.windows.net"
		},
		"test_db_nsw_link_service_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "test-db-nsw"
		},
		"test_db_nsw_link_service_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "admin-user"
		},
		"fileUploadTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ed8e7a79-7483-4d3d-9b7c-78cbf45d6bc9/resourceGroups/test/providers/Microsoft.Storage/storageAccounts/teststoragensw"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/csv_file_delete_order_received_rest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachCsvFileDelete",
						"description": "GetCsvFileNameList で読み込んだファイル数分ループします。",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.csvFileNameList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DeleteCsvFile",
									"description": "CSVファイルを削除します。",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "blob_storage_order_received_rest",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "test_blob_storage_nsw",
												"type": "LinkedServiceReference"
											},
											"path": "test-nsw/test"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{item().fileName}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"csvFileNameList": {
						"type": "array"
					}
				},
				"folder": {
					"name": "受注残"
				},
				"annotations": [],
				"lastPublishTime": "2025-10-03T10:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/blob_storage_order_received_rest')]",
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_to_db_order_received_rest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CsvDataInCache",
						"description": "CSV ファイルから読み込んだデータを cache に保存します。",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "csv_cache_bulk_order_received_rest",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"csvFileRead": {},
									"csvDataInCache": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {}
						}
					},
					{
						"name": "ExitCsvFile",
						"description": "処理対象のフォルダに CSV ファイルが存在する場合にのみ後続の処理を実行します。",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CsvDataInCache",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.count, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute_test_csv_file_delete",
									"description": "test_csv_file_delete パイプラインを実行します。",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "DeleteInsertCsvDataAndGroupByFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "csv_file_delete_order_received_rest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"csvFileNameList": {
												"value": "@activity('DeleteInsertCsvDataAndGroupByFileName').output.resultSets[0].rows",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteInsertCsvDataAndGroupByFileName",
									"description": "削除対象のファイル名をグループ化します。",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "test_db_nsw_link_service",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "csvDataJson",
														"type": "String",
														"value": {
															"value": "@string(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.value)",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "BEGIN TRY\n\t\t\n\tBEGIN TRANSACTION;\n\n\t-- 対象テーブルの内、日時が当月のデータのみ削除\n\tDELETE FROM order_received_rest\n\tWHERE\n\t\tprocess_date = \n\t\t(\n\t\t\tSELECT\n\t\t\t\tprocess_date\n\t\t\tFROM\n\t\t\t\tOPENJSON(@csvDataJson)\n\t\t\t\tWITH (\n\t\t\t\t\tprocess_date CHAR(4)\n\t\t\t\t)\n\t\t\tGROUP BY process_date\n\t\t);\t\n\n\t-- CSV ファイルから読み込んだデータを対象テーブルに INSERT\n\tINSERT INTO order_received_rest\n\t(\n\t\tprocess_date,\n\t\tsales_order,\n\t\tdetail_row_number,\n\t\tslip_type,\n\t\tclient,\n\t\tabbreviation,\n\t\tshipping_destination,\n\t\tshipping_destination_abbreviation,\n\t\tcollection_destination_id,\n\t\tcollection_destination_abbreviation,\n\t\tsupplier,\n\t\tsupplier_search_name,\n\t\tsales_office,\n\t\tsales_office_name,\n\t\tsales_office_group,\n\t\tsales_office_group_name,\n\t\tcustomer,\n\t\tcustomer_abbreviation,\n\t\tbilling_address_or_old_id,\n\t\tbilling_address_abbreviation,\n\t\tbilling_address_name,\n\t\tsales_person,\n\t\tsales_person_name,\n\t\tconsumer,\n\t\tcarrier,\n\t\tcarrier_search_name,\n\t\titem_number,\n\t\ttext,\n\t\tpacking_style_name,\n\t\tshipping_name_code,\n\t\tshipping_destination_name,\n\t\ttrademark_code,\n\t\ttrademark_name,\n\t\tgoods_big_classification_code,\n\t\tgoods_big_classification_name,\n\t\tproduct_group_code,\n\t\tproduct_group_name,\n\t\tgoods_group_code,\n\t\tgoods_group_name,\n\t\tsite,\n\t\tsite_name,\n\t\twarehouse,\n\t\twarehouse_name,\n\t\tcontract_unit_quantity,\n\t\tcontract_price_unit,\n\t\tsale_quantity,\n\t\tsale_unit,\n\t\tsale_amount,\n\t\tinvoice_contract_unit_quantity,\n\t\tinvoice_contract_price_unit,\n\t\tinvoice_amount,\n\t\tinvoice_mimscellaneous_expenses,\n\t\torders_remaining_amount,\n\t\taccountant_currency,\n\t\tinvoice_recording_date,\n\t\tsorting_date,\n\t\tauthor,\n\t\tcreate_at,\n\t\tshipping_scheduled_date,\n\t\tarrival_desired_date\n\t)\n\tSELECT\n\t\tprocess_date,\n\t\tsales_order,\n\t\tdetail_row_number,\n\t\tslip_type,\n\t\tclient,\n\t\tabbreviation,\n\t\tshipping_destination,\n\t\tshipping_destination_abbreviation,\n\t\tcollection_destination_id,\n\t\tcollection_destination_abbreviation,\n\t\tsupplier,\n\t\tsupplier_search_name,\n\t\tsales_office,\n\t\tsales_office_name,\n\t\tsales_office_group,\n\t\tsales_office_group_name,\n\t\tcustomer,\n\t\tcustomer_abbreviation,\n\t\tbilling_address_or_old_id,\n\t\tbilling_address_abbreviation,\n\t\tbilling_address_name,\n\t\tsales_person,\n\t\tsales_person_name,\n\t\tconsumer,\n\t\tcarrier,\n\t\tcarrier_search_name,\n\t\titem_number,\n\t\ttext,\n\t\tpacking_style_name,\n\t\tshipping_name_code,\n\t\tshipping_destination_name,\n\t\ttrademark_code,\n\t\ttrademark_name,\n\t\tgoods_big_classification_code,\n\t\tgoods_big_classification_name,\n\t\tproduct_group_code,\n\t\tproduct_group_name,\n\t\tgoods_group_code,\n\t\tgoods_group_name,\n\t\tsite,\n\t\tsite_name,\n\t\twarehouse,\n\t\twarehouse_name,\n\t\tcontract_unit_quantity,\n\t\tcontract_price_unit,\n\t\tsale_quantity,\n\t\tsale_unit,\n\t\tsale_amount,\n\t\tinvoice_contract_unit_quantity,\n\t\tinvoice_contract_price_unit,\n\t\tinvoice_amount,\n\t\tinvoice_mimscellaneous_expenses,\n\t\torders_remaining_amount,\n\t\taccountant_currency,\n\t\tinvoice_recording_date,\n\t\tsorting_date,\n\t\tauthor,\n\t\tcreate_at,\n\t\tshipping_scheduled_date,\n\t\tarrival_desired_date\n\tFROM\n\t\tOPENJSON(@csvDataJson)\n\t\tWITH\n\t\t(\n\t\t\tprocess_date CHAR(4),\n\t\t\tsales_order VARCHAR(20),\n\t\t\tdetail_row_number REAL,\n\t\t\tslip_type NVARCHAR(10),\n\t\t\tclient CHAR(20),\n\t\t\tabbreviation NVARCHAR(40),\n\t\t\tshipping_destination CHAR(20),\n\t\t\tshipping_destination_abbreviation NVARCHAR(40),\n\t\t\tcollection_destination_id CHAR(20),\n\t\t\tcollection_destination_abbreviation NVARCHAR(40),\n\t\t\tsupplier CHAR(20),\n\t\t\tsupplier_search_name NVARCHAR(20),\n\t\t\tsales_office CHAR(4),\n\t\t\tsales_office_name NVARCHAR(60),\n\t\t\tsales_office_group CHAR(3),\n\t\t\tsales_office_group_name NVARCHAR(60),\n\t\t\tcustomer CHAR(20),\n\t\t\tcustomer_abbreviation NVARCHAR(40),\n\t\t\tbilling_address_or_old_id CHAR(20),\n\t\t\tbilling_address_abbreviation NVARCHAR(40),\n\t\t\tbilling_address_name NVARCHAR(160),\n\t\t\tsales_person CHAR(20),\n\t\t\tsales_person_name NVARCHAR(250),\n\t\t\tconsumer NVARCHAR(MAX),\n\t\t\tcarrier CHAR(20),\n\t\t\tcarrier_search_name NVARCHAR(20),\n\t\t\titem_number VARCHAR(20),\n\t\t\ttext CHAR(20),\n\t\t\tpacking_style_name NVARCHAR(100),\n\t\t\tshipping_name_code CHAR(3),\n\t\t\tshipping_destination_name NVARCHAR(40),\n\t\t\ttrademark_code VARCHAR(4),\n\t\t\ttrademark_name NVARCHAR(40),\n\t\t\tgoods_big_classification_code CHAR(2),\n\t\t\tgoods_big_classification_name NVARCHAR(100),\n\t\t\tproduct_group_code CHAR(9),\n\t\t\tproduct_group_name NVARCHAR(100),\n\t\t\tgoods_group_code CHAR(4),\n\t\t\tgoods_group_name NVARCHAR(100),\n\t\t\tsite CHAR(10),\n\t\t\tsite_name NVARCHAR(60),\n\t\t\twarehouse CHAR(10),\n\t\t\twarehouse_name NVARCHAR(60),\n\t\t\tcontract_unit_quantity REAL,\n\t\t\tcontract_price_unit NVARCHAR(10),\n\t\t\tsale_quantity REAL,\n\t\t\tsale_unit NVARCHAR(10),\n\t\t\tsale_amount REAL,\n\t\t\tinvoice_contract_unit_quantity REAL,\n\t\t\tinvoice_contract_price_unit NVARCHAR(10),\n\t\t\tinvoice_amount REAL,\n\t\t\tinvoice_mimscellaneous_expenses REAL,\n\t\t\torders_remaining_amount REAL,\n\t\t\taccountant_currency VARCHAR(3),\n\t\t\tinvoice_recording_date VARCHAR(20),\n\t\t\tsorting_date CHAR(60),\n\t\t\tauthor VARCHAR(20),\n\t\t\tcreate_at VARCHAR(40),\n\t\t\tshipping_scheduled_date VARCHAR(20),\n\t\t\tarrival_desired_date VARCHAR(20)\n\t\t);\n\n    SELECT\n        fileName\n    FROM\n        OPENJSON(@csvDataJson)\n        WITH (\n            fileName NVARCHAR(MAX)\n        )\n    GROUP BY fileName\n\n\tCOMMIT TRANSACTION;\n\nEND TRY\n\nBEGIN CATCH\n\n\tROLLBACK TRANSACTION;\n\n\t-- ADF に異常終了を伝えるため\n\tTHROW;\n\nEND CATCH"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "受注残"
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T04:54:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/csv_cache_bulk_order_received_rest')]",
				"[concat(variables('factoryId'), '/pipelines/csv_file_delete_order_received_rest')]",
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/foreach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('foreachArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "test_csv_to_db_script_bulk_date_in_filename",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"foreachArray": {
						"type": "Array",
						"defaultValue": [
							"a",
							"b"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/test_csv_to_db_script_bulk_date_in_filename')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_file_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachCsvFileDelete",
						"description": "GetCsvFileNameList で読み込んだファイル数分ループします。",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.csvFileNameList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DeleteCsvFile",
									"description": "CSVファイルを削除します。",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "test_blob_storage_nsw",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "test_blob_storage_nsw",
												"type": "LinkedServiceReference"
											},
											"path": "test-nsw/test"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{item().fileName}",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"csvFileNameList": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-03T10:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test_blob_storage_nsw')]",
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_to_db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test_csv_to_db",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "test_csv_to_db",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"csvFileRead": {},
									"dbTableRead": {},
									"DeleteInsert": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T08:03:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/test_csv_to_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_to_db_script_bulk_date_in_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachCsvFileDelete",
						"description": "GetCsvFileNameList で読み込んだファイル数分ループします。",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DeleteInsertCsvDataAndGroupByFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('DeleteInsertCsvDataAndGroupByFileName').output.resultSets[0].rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DeleteCsvFile",
									"description": "CSVファイルを削除します。",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "test_blob_storage_nsw",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@item().fileName",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "CsvDataInCache",
						"description": "CSV ファイルから読み込んだデータを cache に保存します。",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "csv_cache_bulk",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"csvFileRead": {},
									"csvDataInCache": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {}
						}
					},
					{
						"name": "DeleteInsertCsvDataAndGroupByFileName",
						"description": "削除対象のファイル名をグループ化します。",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CsvDataInCache",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "test_db_nsw_link_service",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "csvDataJson",
											"type": "String",
											"value": {
												"value": "@string(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.value)",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "BEGIN TRY\n\t\t\n\tBEGIN TRANSACTION;\n\n\t-- 対象テーブルの内、日時が当月のデータのみ削除\n\tDELETE FROM test_table\n\tWHERE\n\t\tFORMAT(update_at, 'yyyyMM') = \n\t\t(\n\t\t\tSELECT\n\t\t\t\tREPLACE(LEFT(update_at, 7), '-', '') AS yearManth\n\t\t\tFROM\n\t\t\t\tOPENJSON(@csvDataJson)\n\t\t\t\tWITH (\n\t\t\t\t\tupdate_at date\n\t\t\t\t)\n\t\t\tGROUP BY REPLACE(LEFT(update_at, 7), '-', '')\n\t\t);\t\n\n\t-- CSV ファイルから読み込んだデータを対象テーブルに INSERT\n\tINSERT INTO test_table(name, age, update_at)\n\tSELECT\n\t\tname,\n\t\tage,\n\t\tFORMAT(GETDATE(),'yyyy-MM-dd')\n\tFROM\n\t\tOPENJSON(@csvDataJson)\n\t\tWITH (\n\t\t\tname NVARCHAR(100),\n\t\t\tage INT\n\t\t);\n\n    SELECT\n        fileName\n    FROM\n        OPENJSON(@csvDataJson)\n        WITH (\n            fileName NVARCHAR(MAX)\n        )\n    GROUP BY fileName\n\n\tCOMMIT TRANSACTION;\n\nEND TRY\n\nBEGIN CATCH\n\n\tROLLBACK TRANSACTION;\n\n\t-- ADF に異常終了を伝えるため\n\tTHROW;\n\nEND CATCH"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T04:54:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/csv_cache_bulk')]",
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]",
				"[concat(variables('factoryId'), '/datasets/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_to_db_script_bulk_date_in_filename')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExitCsvFileUntil",
						"description": "読み込み対象のフォルダに CSV ファイルが存在するまで処理を繰り返します",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(variables('isRetry'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CsvDataInCache",
									"description": "CSV ファイルから読み込んだデータを cache に保存します。",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "csv_cache_bulk",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"csvFileRead": {},
												"csvDataInCache": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {}
									}
								},
								{
									"name": "ExitCsvFile",
									"description": "処理対象のフォルダに CSV ファイルが存在する場合にのみ後続の処理を実行します。",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "CsvDataInCache",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.count, 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetTrueToIsRetry",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isRetry",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DeleteInsertCsvDataAndGroupByFileName",
												"description": "削除対象のファイル名をグループ化します。",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "test_db_nsw_link_service",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "csvDataJson",
																	"type": "String",
																	"value": {
																		"value": "@string(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.value)",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "Query",
															"text": "BEGIN TRY\n\t\t\n\tBEGIN TRANSACTION;\n\n\t-- 対象テーブルの内、日時が当月のデータのみ削除\n\tDELETE FROM test_table\n\tWHERE\n\t\tFORMAT(update_at, 'yyyyMM') = \n\t\t(\n\t\t\tSELECT\n\t\t\t\tLEFT(RIGHT(fileName, 12), 6) AS yearManth\n\t\t\tFROM\n\t\t\t\tOPENJSON(@csvDataJson)\n\t\t\t\tWITH (\n\t\t\t\t\tfileName NVARCHAR(MAX)\n\t\t\t\t)\n\t\t\tGROUP BY LEFT(RIGHT(fileName, 12), 6)\n\t\t);\t\n\n\t-- CSV ファイルから読み込んだデータを対象テーブルに INSERT\n\tINSERT INTO test_table(name, age, update_at)\n\tSELECT\n\t\tname,\n\t\tage,\n\t\tFORMAT(GETDATE(),'yyyy-MM-dd')\n\tFROM\n\t\tOPENJSON(@csvDataJson)\n\t\tWITH (\n\t\t\tname NVARCHAR(100),\n\t\t\tage INT\n\t\t);\n\n    SELECT\n        fileName\n    FROM\n        OPENJSON(@csvDataJson)\n        WITH (\n            fileName NVARCHAR(MAX)\n        )\n    GROUP BY fileName\n\n\tCOMMIT TRANSACTION;\n\nEND TRY\n\nBEGIN CATCH\n\n\tROLLBACK TRANSACTION;\n\n\t-- ADF に異常終了を伝えるため\n\tTHROW;\n\nEND CATCH"
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Execute_test_csv_file_delete",
												"description": "test_csv_file_delete パイプラインを実行します。",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "DeleteInsertCsvDataAndGroupByFileName",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "test_csv_file_delete",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"csvFileNameList": {
															"value": "@activity('DeleteInsertCsvDataAndGroupByFileName').output.resultSets[0].rows",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "SetFalseToIsRetry",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Execute_test_csv_file_delete",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "isRetry",
													"value": {
														"value": "@bool(0)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"isRetry": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T04:54:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/csv_cache_bulk')]",
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]",
				"[concat(variables('factoryId'), '/pipelines/test_csv_file_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_to_db_stored_procedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCsvFileNameList",
						"description": "対象のフォルダ配下に存在するファイル名一覧を取得します。",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "test_blob_storage_nsw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "DeleteInsertCsvData",
						"description": "対象テーブルから条件に合致するレコードを削除した後、CSV ファイルから読み込んだデータを対象テーブルに INSERT します。",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEachCsvFileRead",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[test_csv_to_db]",
							"storedProcedureParameters": {
								"csvDataJson": {
									"value": {
										"value": "@concat('[', substring(variables('csvDataJson'), 0, sub(length(variables('csvDataJson')), 1)), ']')\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"fileName": {
									"value": {
										"value": "@string(activity('FilterCsvFile').output.value)\n",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "test_db_nsw_link_service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEachCsvFileRead",
						"description": "GetCsvFileNameList で読み込んだファイル数分ループします。",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterCsvFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterCsvFile').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CsvDataInCache",
									"description": "CSV ファイルから読み込んだデータを cache に保存します。",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "csv_cache",
											"type": "DataFlowReference",
											"parameters": {
												"fileName": {
													"value": "'@{item().name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {}
									}
								},
								{
									"name": "SetCsvDataJson",
									"description": "各 CSV ファイルのデータを1つの文字列　として結合します。",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetTempCsvDataJson",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "csvDataJson",
										"value": {
											"value": "@concat(replace(replace(variables('tempCsvDataJson'), '[', ''), ']', '')\n, replace(replace(string(activity('CsvDataInCache').output.runStatus.output.sink1.value), '[', ''), ']', '')\n, ',')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetTempCsvDataJson",
									"description": "SetCsvDataJson の値を一時退避します。",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "CsvDataInCache",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "tempCsvDataJson",
										"value": {
											"value": "@variables('csvDataJson')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEachCsvFileDelete",
						"description": "GetCsvFileNameList で読み込んだファイル数分ループします。",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DeleteInsertCsvData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterCsvFile').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DeleteCsvFile",
									"description": "CSVファイルを削除します。",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "test_blob_storage_nsw",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterCsvFile",
						"description": "取得したファイルの内、CSV ファイルのみを抽出します。",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetCsvFileNameList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetCsvFileNameList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"csvDataJson": {
						"type": "String"
					},
					"tempCsvDataJson": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T01:55:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test_blob_storage_nsw')]",
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]",
				"[concat(variables('factoryId'), '/dataflows/csv_cache')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_to_db_stored_procedure_bulk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteInsertCsvData",
						"description": "対象テーブルから条件に合致するレコードを削除した後、CSV ファイルから読み込んだデータを対象テーブルに INSERT します。\nまた、削除対象の CSV ファイル名一覧を 出力します。",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CsvDataInCache",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[test_csv_to_db_output_filename]",
							"storedProcedureParameters": {
								"csvDataJson": {
									"value": {
										"value": "@string(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.value)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "test_db_nsw_link_service",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEachCsvFileDelete",
						"description": "GetCsvFileNameList で読み込んだファイル数分ループします。",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GroupByFileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GroupByFileName').output.resultSets[0].rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DeleteCsvFile",
									"description": "CSVファイルを削除します。",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "test_blob_storage_nsw",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"wildcardFileName": {
												"value": "@item().fileName",
												"type": "Expression"
											},
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "CsvDataInCache",
						"description": "CSV ファイルから読み込んだデータを cache に保存します。",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "csv_cache_bulk",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"csvFileRead": {},
									"csvDataInCache": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {}
						}
					},
					{
						"name": "GroupByFileName",
						"description": "削除対象のファイル名をグループ化します。",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DeleteInsertCsvData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "test_db_nsw_link_service",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "csvDataJson",
											"type": "String",
											"value": {
												"value": "@string(activity('CsvDataInCache').output.runStatus.output.csvDataInCache.value)",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "SELECT\r\n    fileName\r\nFROM\r\n    OPENJSON(@csvDataJson)\r\n    WITH (\r\n        fileName NVARCHAR(MAX)\r\n    )\r\nGROUP BY fileName"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-09T04:54:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]",
				"[concat(variables('factoryId'), '/dataflows/csv_cache_bulk')]",
				"[concat(variables('factoryId'), '/datasets/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_merge')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Script1",
						"description": "feature-furutani-1- から feature-furutani-1 にマージします。",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "test_db_nsw_link_service",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SELECT *\nFROM test_table\nWHERE id in(63, 64);"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_not_identity_csv_to_db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test_not_identity_csv_to_db",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "test_not_identity_csv_to_db",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"csvFileRead": {},
									"dbTableRead": {},
									"DeleteInsert": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-10-08T10:10:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/test_not_identity_csv_to_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_storage_order_received_rest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test_blob_storage_nsw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "受注残",
						"container": "test-nsw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_blob_storage_nsw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test_blob_storage_nsw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "test_nsw_1",
						"container": "test-nsw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_db_nsw_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test_db_nsw_link_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "update_at",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_not_identity_db_nsw_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test_db_nsw_link_service",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "update_at",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test_table_not_identity"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_db_nsw_link_service')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_blob_storage_nsw')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('test_blob_storage_nsw_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_db_nsw_link_service')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "test_db_nsw 用のリンクサービス",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('test_db_nsw_link_service_properties_typeProperties_server')]",
					"database": "[parameters('test_db_nsw_link_service_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('test_db_nsw_link_service_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('test_db_nsw_link_service_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fileUploadTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "test_csv_to_db_script_bulk_date_in_filename",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/test-nsw/blobs/test_nsw_1",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('fileUploadTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/test_csv_to_db_script_bulk_date_in_filename')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_cache')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "test_blob_storage_nsw",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     fileName as string ('test1_20251007.csv')",
						"}",
						"source(output(",
						"          name as string,",
						"          age as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'test-nsw',",
						"     folderPath: 'test_nsw_1',",
						"     fileName: ($fileName),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_cache_bulk')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "test_blob_storage_nsw",
								"type": "LinkedServiceReference"
							},
							"name": "csvFileRead"
						}
					],
					"sinks": [
						{
							"name": "csvDataInCache"
						}
					],
					"transformations": [
						{
							"name": "derivedFileNameColumn"
						},
						{
							"name": "assert1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          age as short,",
						"          update_at as date 'yyyy/MM/dd'",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     rowUrlColumn: 'filePath',",
						"     format: 'delimited',",
						"     container: 'test-nsw',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['test_nsw_1/test*.csv']) ~> csvFileRead",
						"csvFileRead derive(fileName = split(filePath, '/')[size(split(filePath, '/'))],",
						"          update_at = toString(update_at, 'yyyy-MM-dd')) ~> derivedFileNameColumn",
						"derivedFileNameColumn assert(expectTrue(!isNull(update_at), false, 'assert1', null, \"update_at 列に NULL が存在する場合\"),",
						"     abort: true) ~> assert1",
						"assert1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          name,",
						"          age,",
						"          update_at,",
						"          fileName",
						"     )) ~> csvDataInCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_cache_bulk_order_received_rest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "受注残"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "test_blob_storage_nsw",
								"type": "LinkedServiceReference"
							},
							"name": "csvFileRead"
						}
					],
					"sinks": [
						{
							"name": "csvDataInCache"
						}
					],
					"transformations": [
						{
							"name": "derivedFileNameColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {処理年月} as string,",
						"          {販売注文} as string,",
						"          {明細行番号} as integer,",
						"          {伝票タイプ} as string,",
						"          {顧客} as string,",
						"          {略称} as string,",
						"          {出荷先コード} as string,",
						"          {出荷先-略称} as string,",
						"          {回収先ID} as string,",
						"          {回収先-略称} as string,",
						"          {仕入先} as string,",
						"          {仕入先-検索名} as string,",
						"          {営業所} as short,",
						"          {営業所名} as string,",
						"          {営業所グループ} as short,",
						"          {営業所グループ名} as string,",
						"          {カスタマー} as string,",
						"          {カスタマー略称} as string,",
						"          {請求先/元 ID} as string,",
						"          {請求先-略称} as string,",
						"          {請求先-名前} as string,",
						"          {営業員} as string,",
						"          {営業員名} as string,",
						"          {需要家} as string,",
						"          {運送業者} as string,",
						"          {運送業者-検索名} as string,",
						"          {品目番号} as string,",
						"          {テキスト} as string,",
						"          {荷姿名} as string,",
						"          {出荷名コード} as string,",
						"          {出荷名名称} as string,",
						"          {商標コード} as short,",
						"          {商標名} as string,",
						"          {商品大分類コード} as short,",
						"          {商品大分類名} as string,",
						"          {製品群コード} as string,",
						"          {製品群名} as string,",
						"          {商品群コード} as string,",
						"          {商品群名} as string,",
						"          {サイト} as short,",
						"          {サイト名} as string,",
						"          {倉庫} as string,",
						"          {倉庫名} as string,",
						"          {契約単位数量} as short,",
						"          {契約単価単位} as string,",
						"          {販売-数量} as short,",
						"          {販売-単位} as string,",
						"          {販売-金額} as integer,",
						"          {請求書-契約単位数量} as integer,",
						"          {請求書-契約単価単位} as string,",
						"          {請求書-金額} as integer,",
						"          {請求書-台貫金額(諸費用)} as integer,",
						"          {受注残金額} as integer,",
						"          {会計通貨} as string,",
						"          {請求書-計上日} as date 'yyyy/MM/dd',",
						"          {整理年月} as string,",
						"          {作成者} as string,",
						"          {作成日時} as timestamp 'yyyy/MM/dd HH:mm:ss',",
						"          {出荷予定日} as date 'yyyy/MM/dd',",
						"          {入荷希望日} as date 'yyyy/MM/dd'",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     rowUrlColumn: 'filePath',",
						"     format: 'delimited',",
						"     container: 'test-nsw',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     encodingName: 'SHIFT-JIS',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['受注残/*.csv']) ~> csvFileRead",
						"csvFileRead derive(fileName = split(filePath, '/')[size(split(filePath, '/'))],",
						"          {請求書-計上日} = toString({請求書-計上日}, 'yyyy-MM-dd'),",
						"          {作成日時} = toString({作成日時}, 'yyyy-MM-dd hh:mm:ss'),",
						"          {出荷予定日} = toString({出荷予定日}, 'yyyy-MM-dd'),",
						"          {入荷希望日} = toString({入荷希望日}, 'yyyy-MM-dd')) ~> derivedFileNameColumn",
						"derivedFileNameColumn sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          process_date = {処理年月},",
						"          sales_order = {販売注文},",
						"          detail_row_number = {明細行番号},",
						"          slip_type = {伝票タイプ},",
						"          client = {顧客},",
						"          abbreviation = {略称},",
						"          shipping_destination = {出荷先コード},",
						"          shipping_destination_abbreviation = {出荷先-略称},",
						"          collection_destination_id = {回収先ID},",
						"          collection_destination_abbreviation = {回収先-略称},",
						"          supplier = {仕入先},",
						"          supplier_search_name = {仕入先-検索名},",
						"          sales_office = {営業所},",
						"          sales_office_name = {営業所名},",
						"          sales_office_group = {営業所グループ},",
						"          customer = {カスタマー},",
						"          customer_abbreviation = {カスタマー略称},",
						"          billing_address_or_old_id = {請求先/元 ID},",
						"          billing_address_abbreviation = {請求先-略称},",
						"          billing_address_name = {請求先-名前},",
						"          sales_person = {営業員},",
						"          sales_person_name = {営業員名},",
						"          consumer = {需要家},",
						"          carrier = {運送業者},",
						"          carrier_search_name = {運送業者-検索名},",
						"          item_number = {品目番号},",
						"          text = {テキスト},",
						"          packing_style_name = {荷姿名},",
						"          shipping_name_code = {出荷名コード},",
						"          shipping_destination_name = {出荷名名称},",
						"          trademark_code = {商標コード},",
						"          trademark_name = {商標名},",
						"          goods_big_classification_code = {商品大分類コード},",
						"          goods_big_classification_name = {商品大分類名},",
						"          product_group_code = {製品群コード},",
						"          product_group_name = {製品群名},",
						"          goods_group_code = {商品群コード},",
						"          goods_group_name = {商品群名},",
						"          site = {サイト},",
						"          site_name = {サイト名},",
						"          warehouse = {倉庫},",
						"          warehouse_name = {倉庫名},",
						"          contract_unit_quantity = {契約単位数量},",
						"          contract_price_unit = {契約単価単位},",
						"          sale_quantity = {販売-数量},",
						"          sale_unit = {販売-単位},",
						"          sale_amount = {販売-金額},",
						"          invoice_contract_unit_quantity = {請求書-契約単位数量},",
						"          invoice_contract_price_unit = {請求書-契約単価単位},",
						"          invoice_amount = {請求書-金額},",
						"          invoice_mimscellaneous_expenses = {請求書-台貫金額(諸費用)},",
						"          orders_remaining_amount = {受注残金額},",
						"          accountant_currency = {会計通貨},",
						"          invoice_recording_date = {請求書-計上日},",
						"          sorting_date = {整理年月},",
						"          author = {作成者},",
						"          create_at = {作成日時},",
						"          shipping_scheduled_date = {出荷予定日},",
						"          arrival_desired_date = {入荷希望日},",
						"          fileName",
						"     )) ~> csvDataInCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_csv_to_db')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "test_blob_storage_nsw",
								"type": "LinkedServiceReference"
							},
							"name": "csvFileRead"
						},
						{
							"dataset": {
								"referenceName": "test_db_nsw_dataset",
								"type": "DatasetReference"
							},
							"name": "dbTableRead"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "test_db_nsw_dataset",
								"type": "DatasetReference"
							},
							"name": "DeleteInsert"
						}
					],
					"transformations": [
						{
							"name": "deleteInsertConditions"
						},
						{
							"name": "derivedCsvYearMonthColumn"
						},
						{
							"name": "derivedDbYearMonthColumn"
						},
						{
							"name": "unionCsvDb"
						},
						{
							"name": "deleteRecordFilter"
						},
						{
							"name": "aggregateCsvYearMonth"
						},
						{
							"name": "joinYearMonth"
						},
						{
							"name": "derivedNewUpdateAtColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          age as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     rowUrlColumn: 'fileName',",
						"     format: 'delimited',",
						"     container: 'test-nsw',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['test_nsw_1/test*.csv']) ~> csvFileRead",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          age as integer,",
						"          update_at as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dbTableRead",
						"derivedNewUpdateAtColumn alterRow(deleteIf(!isNull(id)),",
						"     insertIf(isNull(id))) ~> deleteInsertConditions",
						"csvFileRead derive(csvYearMonth = left(right(fileName, 12), 6),",
						"          csvUpdate_at = toDate(left(right(fileName, 12), 4) + '-' + left(right(fileName, 8), 2) + '-' + left(right(fileName, 6), 2), 'yyyy-MM-dd')) ~> derivedCsvYearMonthColumn",
						"dbTableRead derive(dbYearMonth = toString(update_at, 'yyyyMM')) ~> derivedDbYearMonthColumn",
						"derivedCsvYearMonthColumn, derivedDbYearMonthColumn union(byName: true)~> unionCsvDb",
						"joinYearMonth filter(iif(isNull(id), isNull(id), yearMonth == dbYearMonth)) ~> deleteRecordFilter",
						"unionCsvDb aggregate(yearMonth = first(csvYearMonth, true())) ~> aggregateCsvYearMonth",
						"unionCsvDb, aggregateCsvYearMonth join(!isNull(yearMonth) || iif(isNull(id), !isNull(csvYearMonth), !isNull(dbYearMonth)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinYearMonth",
						"deleteRecordFilter derive(newUpdateAt = iif(isNull(id), csvUpdate_at, update_at)) ~> derivedNewUpdateAtColumn",
						"deleteInsertConditions sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          age as integer,",
						"          update_at as date",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['update_at'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name,",
						"          age,",
						"          update_at = newUpdateAt",
						"     )) ~> DeleteInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]",
				"[concat(variables('factoryId'), '/datasets/test_db_nsw_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_not_identity_csv_to_db')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "test_blob_storage_nsw",
								"type": "LinkedServiceReference"
							},
							"name": "csvFileRead"
						},
						{
							"dataset": {
								"referenceName": "test_not_identity_db_nsw_dataset",
								"type": "DatasetReference"
							},
							"name": "dbTableRead"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "test_not_identity_db_nsw_dataset",
								"type": "DatasetReference"
							},
							"name": "DeleteInsert"
						}
					],
					"transformations": [
						{
							"name": "deleteInsertConditions"
						},
						{
							"name": "derivedCsvYearMonthColumn"
						},
						{
							"name": "derivedDbYearMonthColumn"
						},
						{
							"name": "unionCsvDb"
						},
						{
							"name": "deleteRecordFilter"
						},
						{
							"name": "aggregateCsvYearMonth"
						},
						{
							"name": "joinYearMonth"
						},
						{
							"name": "derivedNewUpdateAtColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          newId as short,",
						"          name as string,",
						"          age as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     rowUrlColumn: 'fileName',",
						"     format: 'delimited',",
						"     container: 'test-nsw',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     wildcardPaths:['test_nsw_1/test*.csv']) ~> csvFileRead",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          age as integer,",
						"          update_at as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dbTableRead",
						"derivedNewUpdateAtColumn alterRow(deleteIf(!isNull(id)),",
						"     insertIf(isNull(id))) ~> deleteInsertConditions",
						"csvFileRead derive(csvYearMonth = left(right(fileName, 12), 6),",
						"          csvUpdate_at = toDate(left(right(fileName, 12), 4) + '-' + left(right(fileName, 8), 2) + '-' + left(right(fileName, 6), 2), 'yyyy-MM-dd')) ~> derivedCsvYearMonthColumn",
						"dbTableRead derive(dbYearMonth = toString(update_at, 'yyyyMM')) ~> derivedDbYearMonthColumn",
						"derivedCsvYearMonthColumn, derivedDbYearMonthColumn union(byName: true)~> unionCsvDb",
						"joinYearMonth filter(iif(isNull(id), isNull(id), yearMonth == dbYearMonth)) ~> deleteRecordFilter",
						"unionCsvDb aggregate(yearMonth = first(csvYearMonth, true())) ~> aggregateCsvYearMonth",
						"unionCsvDb, aggregateCsvYearMonth join(!isNull(yearMonth) || iif(isNull(id), !isNull(csvYearMonth), !isNull(dbYearMonth)),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinYearMonth",
						"deleteRecordFilter derive(newUpdateAt = iif(isNull(id), csvUpdate_at, update_at),",
						"          insertId = iif(isNull(id), newId, toShort(id))) ~> derivedNewUpdateAtColumn",
						"deleteInsertConditions sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          age as integer,",
						"          update_at as date",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = insertId,",
						"          name,",
						"          age,",
						"          update_at = newUpdateAt",
						"     )) ~> DeleteInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test_blob_storage_nsw')]",
				"[concat(variables('factoryId'), '/datasets/test_not_identity_db_nsw_dataset')]"
			]
		}
	]
}